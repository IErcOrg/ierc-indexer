// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: indexer/event.proto

package indexer

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on IERC20TickCreated with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IERC20TickCreated) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IERC20TickCreated with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IERC20TickCreatedMultiError, or nil if none found.
func (m *IERC20TickCreated) ValidateAll() error {
	return m.validate(true)
}

func (m *IERC20TickCreated) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Protocol

	// no validation rules for Operate

	// no validation rules for Tick

	// no validation rules for Decimals

	// no validation rules for MaxSupply

	// no validation rules for Limit

	// no validation rules for WalletLimit

	// no validation rules for Workc

	// no validation rules for Creator

	// no validation rules for Nonce

	if len(errors) > 0 {
		return IERC20TickCreatedMultiError(errors)
	}

	return nil
}

// IERC20TickCreatedMultiError is an error wrapping multiple validation errors
// returned by IERC20TickCreated.ValidateAll() if the designated constraints
// aren't met.
type IERC20TickCreatedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IERC20TickCreatedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IERC20TickCreatedMultiError) AllErrors() []error { return m }

// IERC20TickCreatedValidationError is the validation error returned by
// IERC20TickCreated.Validate if the designated constraints aren't met.
type IERC20TickCreatedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IERC20TickCreatedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IERC20TickCreatedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IERC20TickCreatedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IERC20TickCreatedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IERC20TickCreatedValidationError) ErrorName() string {
	return "IERC20TickCreatedValidationError"
}

// Error satisfies the builtin error interface
func (e IERC20TickCreatedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIERC20TickCreated.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IERC20TickCreatedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IERC20TickCreatedValidationError{}

// Validate checks the field values on IERC20Minted with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IERC20Minted) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IERC20Minted with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IERC20MintedMultiError, or
// nil if none found.
func (m *IERC20Minted) ValidateAll() error {
	return m.validate(true)
}

func (m *IERC20Minted) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Protocol

	// no validation rules for Operate

	// no validation rules for Tick

	// no validation rules for From

	// no validation rules for To

	// no validation rules for Nonce

	// no validation rules for MintedAmount

	// no validation rules for Gas

	// no validation rules for GasPrice

	if len(errors) > 0 {
		return IERC20MintedMultiError(errors)
	}

	return nil
}

// IERC20MintedMultiError is an error wrapping multiple validation errors
// returned by IERC20Minted.ValidateAll() if the designated constraints aren't met.
type IERC20MintedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IERC20MintedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IERC20MintedMultiError) AllErrors() []error { return m }

// IERC20MintedValidationError is the validation error returned by
// IERC20Minted.Validate if the designated constraints aren't met.
type IERC20MintedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IERC20MintedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IERC20MintedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IERC20MintedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IERC20MintedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IERC20MintedValidationError) ErrorName() string { return "IERC20MintedValidationError" }

// Error satisfies the builtin error interface
func (e IERC20MintedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIERC20Minted.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IERC20MintedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IERC20MintedValidationError{}

// Validate checks the field values on IERCPoWTickCreated with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IERCPoWTickCreated) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IERCPoWTickCreated with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IERCPoWTickCreatedMultiError, or nil if none found.
func (m *IERCPoWTickCreated) ValidateAll() error {
	return m.validate(true)
}

func (m *IERCPoWTickCreated) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Protocol

	// no validation rules for Operate

	// no validation rules for Tick

	// no validation rules for Decimals

	// no validation rules for MaxSupply

	for idx, item := range m.GetTokenomicsDetails() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IERCPoWTickCreatedValidationError{
						field:  fmt.Sprintf("TokenomicsDetails[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IERCPoWTickCreatedValidationError{
						field:  fmt.Sprintf("TokenomicsDetails[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IERCPoWTickCreatedValidationError{
					field:  fmt.Sprintf("TokenomicsDetails[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetRule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IERCPoWTickCreatedValidationError{
					field:  "Rule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IERCPoWTickCreatedValidationError{
					field:  "Rule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IERCPoWTickCreatedValidationError{
				field:  "Rule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Creator

	if len(errors) > 0 {
		return IERCPoWTickCreatedMultiError(errors)
	}

	return nil
}

// IERCPoWTickCreatedMultiError is an error wrapping multiple validation errors
// returned by IERCPoWTickCreated.ValidateAll() if the designated constraints
// aren't met.
type IERCPoWTickCreatedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IERCPoWTickCreatedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IERCPoWTickCreatedMultiError) AllErrors() []error { return m }

// IERCPoWTickCreatedValidationError is the validation error returned by
// IERCPoWTickCreated.Validate if the designated constraints aren't met.
type IERCPoWTickCreatedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IERCPoWTickCreatedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IERCPoWTickCreatedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IERCPoWTickCreatedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IERCPoWTickCreatedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IERCPoWTickCreatedValidationError) ErrorName() string {
	return "IERCPoWTickCreatedValidationError"
}

// Error satisfies the builtin error interface
func (e IERCPoWTickCreatedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIERCPoWTickCreated.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IERCPoWTickCreatedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IERCPoWTickCreatedValidationError{}

// Validate checks the field values on IERCPoWMinted with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IERCPoWMinted) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IERCPoWMinted with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IERCPoWMintedMultiError, or
// nil if none found.
func (m *IERCPoWMinted) ValidateAll() error {
	return m.validate(true)
}

func (m *IERCPoWMinted) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Protocol

	// no validation rules for Operate

	// no validation rules for Tick

	// no validation rules for From

	// no validation rules for To

	// no validation rules for Nonce

	// no validation rules for IsPow

	// no validation rules for PowTotalShare

	// no validation rules for PowMinerShare

	// no validation rules for PowMintedAmount

	// no validation rules for IsPos

	// no validation rules for PosTotalShare

	// no validation rules for PosMinerShare

	// no validation rules for PosMintedAmount

	// no validation rules for Gas

	// no validation rules for GasPrice

	// no validation rules for IsAirdrop

	// no validation rules for AirdropAmount

	// no validation rules for BurnedAmount

	if len(errors) > 0 {
		return IERCPoWMintedMultiError(errors)
	}

	return nil
}

// IERCPoWMintedMultiError is an error wrapping multiple validation errors
// returned by IERCPoWMinted.ValidateAll() if the designated constraints
// aren't met.
type IERCPoWMintedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IERCPoWMintedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IERCPoWMintedMultiError) AllErrors() []error { return m }

// IERCPoWMintedValidationError is the validation error returned by
// IERCPoWMinted.Validate if the designated constraints aren't met.
type IERCPoWMintedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IERCPoWMintedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IERCPoWMintedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IERCPoWMintedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IERCPoWMintedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IERCPoWMintedValidationError) ErrorName() string { return "IERCPoWMintedValidationError" }

// Error satisfies the builtin error interface
func (e IERCPoWMintedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIERCPoWMinted.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IERCPoWMintedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IERCPoWMintedValidationError{}

// Validate checks the field values on TickTransferred with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TickTransferred) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TickTransferred with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TickTransferredMultiError, or nil if none found.
func (m *TickTransferred) ValidateAll() error {
	return m.validate(true)
}

func (m *TickTransferred) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Protocol

	// no validation rules for Operate

	// no validation rules for Tick

	// no validation rules for From

	// no validation rules for To

	// no validation rules for Amount

	// no validation rules for EthValue

	// no validation rules for GasPrice

	// no validation rules for SignerNonce

	// no validation rules for Sign

	if len(errors) > 0 {
		return TickTransferredMultiError(errors)
	}

	return nil
}

// TickTransferredMultiError is an error wrapping multiple validation errors
// returned by TickTransferred.ValidateAll() if the designated constraints
// aren't met.
type TickTransferredMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TickTransferredMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TickTransferredMultiError) AllErrors() []error { return m }

// TickTransferredValidationError is the validation error returned by
// TickTransferred.Validate if the designated constraints aren't met.
type TickTransferredValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TickTransferredValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TickTransferredValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TickTransferredValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TickTransferredValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TickTransferredValidationError) ErrorName() string { return "TickTransferredValidationError" }

// Error satisfies the builtin error interface
func (e TickTransferredValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTickTransferred.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TickTransferredValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TickTransferredValidationError{}

// Validate checks the field values on StakingPoolUpdated with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StakingPoolUpdated) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StakingPoolUpdated with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StakingPoolUpdatedMultiError, or nil if none found.
func (m *StakingPoolUpdated) ValidateAll() error {
	return m.validate(true)
}

func (m *StakingPoolUpdated) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Protocol

	// no validation rules for Operate

	// no validation rules for From

	// no validation rules for To

	// no validation rules for Pool

	// no validation rules for PoolId

	// no validation rules for Name

	// no validation rules for Owner

	for idx, item := range m.GetDetails() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StakingPoolUpdatedValidationError{
						field:  fmt.Sprintf("Details[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StakingPoolUpdatedValidationError{
						field:  fmt.Sprintf("Details[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StakingPoolUpdatedValidationError{
					field:  fmt.Sprintf("Details[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for StopBlock

	if len(errors) > 0 {
		return StakingPoolUpdatedMultiError(errors)
	}

	return nil
}

// StakingPoolUpdatedMultiError is an error wrapping multiple validation errors
// returned by StakingPoolUpdated.ValidateAll() if the designated constraints
// aren't met.
type StakingPoolUpdatedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StakingPoolUpdatedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StakingPoolUpdatedMultiError) AllErrors() []error { return m }

// StakingPoolUpdatedValidationError is the validation error returned by
// StakingPoolUpdated.Validate if the designated constraints aren't met.
type StakingPoolUpdatedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StakingPoolUpdatedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StakingPoolUpdatedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StakingPoolUpdatedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StakingPoolUpdatedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StakingPoolUpdatedValidationError) ErrorName() string {
	return "StakingPoolUpdatedValidationError"
}

// Error satisfies the builtin error interface
func (e StakingPoolUpdatedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStakingPoolUpdated.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StakingPoolUpdatedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StakingPoolUpdatedValidationError{}

// Validate checks the field values on Event with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Event) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Event with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EventMultiError, or nil if none found.
func (m *Event) ValidateAll() error {
	return m.validate(true)
}

func (m *Event) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BlockNumber

	// no validation rules for TxHash

	// no validation rules for PosInIercTxs

	// no validation rules for From

	// no validation rules for To

	// no validation rules for Value

	// no validation rules for EventAt

	// no validation rules for ErrCode

	// no validation rules for ErrReason

	switch v := m.Event.(type) {
	case *Event_TickCreated:
		if v == nil {
			err := EventValidationError{
				field:  "Event",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTickCreated()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "TickCreated",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "TickCreated",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTickCreated()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "TickCreated",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Event_Minted:
		if v == nil {
			err := EventValidationError{
				field:  "Event",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMinted()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "Minted",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "Minted",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMinted()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "Minted",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Event_PowTickCreated:
		if v == nil {
			err := EventValidationError{
				field:  "Event",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPowTickCreated()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "PowTickCreated",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "PowTickCreated",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPowTickCreated()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "PowTickCreated",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Event_PowMinted:
		if v == nil {
			err := EventValidationError{
				field:  "Event",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPowMinted()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "PowMinted",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "PowMinted",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPowMinted()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "PowMinted",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Event_TickTransferred:
		if v == nil {
			err := EventValidationError{
				field:  "Event",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTickTransferred()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "TickTransferred",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "TickTransferred",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTickTransferred()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "TickTransferred",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Event_PoolUpdated:
		if v == nil {
			err := EventValidationError{
				field:  "Event",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPoolUpdated()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "PoolUpdated",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "PoolUpdated",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPoolUpdated()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "PoolUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return EventMultiError(errors)
	}

	return nil
}

// EventMultiError is an error wrapping multiple validation errors returned by
// Event.ValidateAll() if the designated constraints aren't met.
type EventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventMultiError) AllErrors() []error { return m }

// EventValidationError is the validation error returned by Event.Validate if
// the designated constraints aren't met.
type EventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventValidationError) ErrorName() string { return "EventValidationError" }

// Error satisfies the builtin error interface
func (e EventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventValidationError{}

// Validate checks the field values on IERCPoWTickCreated_TokenomicsDetail with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IERCPoWTickCreated_TokenomicsDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IERCPoWTickCreated_TokenomicsDetail
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IERCPoWTickCreated_TokenomicsDetailMultiError, or nil if none found.
func (m *IERCPoWTickCreated_TokenomicsDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *IERCPoWTickCreated_TokenomicsDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BlockNumber

	// no validation rules for Amount

	if len(errors) > 0 {
		return IERCPoWTickCreated_TokenomicsDetailMultiError(errors)
	}

	return nil
}

// IERCPoWTickCreated_TokenomicsDetailMultiError is an error wrapping multiple
// validation errors returned by
// IERCPoWTickCreated_TokenomicsDetail.ValidateAll() if the designated
// constraints aren't met.
type IERCPoWTickCreated_TokenomicsDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IERCPoWTickCreated_TokenomicsDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IERCPoWTickCreated_TokenomicsDetailMultiError) AllErrors() []error { return m }

// IERCPoWTickCreated_TokenomicsDetailValidationError is the validation error
// returned by IERCPoWTickCreated_TokenomicsDetail.Validate if the designated
// constraints aren't met.
type IERCPoWTickCreated_TokenomicsDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IERCPoWTickCreated_TokenomicsDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IERCPoWTickCreated_TokenomicsDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IERCPoWTickCreated_TokenomicsDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IERCPoWTickCreated_TokenomicsDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IERCPoWTickCreated_TokenomicsDetailValidationError) ErrorName() string {
	return "IERCPoWTickCreated_TokenomicsDetailValidationError"
}

// Error satisfies the builtin error interface
func (e IERCPoWTickCreated_TokenomicsDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIERCPoWTickCreated_TokenomicsDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IERCPoWTickCreated_TokenomicsDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IERCPoWTickCreated_TokenomicsDetailValidationError{}

// Validate checks the field values on IERCPoWTickCreated_Rule with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IERCPoWTickCreated_Rule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IERCPoWTickCreated_Rule with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IERCPoWTickCreated_RuleMultiError, or nil if none found.
func (m *IERCPoWTickCreated_Rule) ValidateAll() error {
	return m.validate(true)
}

func (m *IERCPoWTickCreated_Rule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PowRatio

	// no validation rules for MinWorkc

	// no validation rules for DifficultyRatio

	// no validation rules for PosRatio

	// no validation rules for PosPool

	if len(errors) > 0 {
		return IERCPoWTickCreated_RuleMultiError(errors)
	}

	return nil
}

// IERCPoWTickCreated_RuleMultiError is an error wrapping multiple validation
// errors returned by IERCPoWTickCreated_Rule.ValidateAll() if the designated
// constraints aren't met.
type IERCPoWTickCreated_RuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IERCPoWTickCreated_RuleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IERCPoWTickCreated_RuleMultiError) AllErrors() []error { return m }

// IERCPoWTickCreated_RuleValidationError is the validation error returned by
// IERCPoWTickCreated_Rule.Validate if the designated constraints aren't met.
type IERCPoWTickCreated_RuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IERCPoWTickCreated_RuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IERCPoWTickCreated_RuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IERCPoWTickCreated_RuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IERCPoWTickCreated_RuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IERCPoWTickCreated_RuleValidationError) ErrorName() string {
	return "IERCPoWTickCreated_RuleValidationError"
}

// Error satisfies the builtin error interface
func (e IERCPoWTickCreated_RuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIERCPoWTickCreated_Rule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IERCPoWTickCreated_RuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IERCPoWTickCreated_RuleValidationError{}

// Validate checks the field values on StakingPoolUpdated_TickConfigDetail with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *StakingPoolUpdated_TickConfigDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StakingPoolUpdated_TickConfigDetail
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// StakingPoolUpdated_TickConfigDetailMultiError, or nil if none found.
func (m *StakingPoolUpdated_TickConfigDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *StakingPoolUpdated_TickConfigDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Tick

	// no validation rules for Ratio

	// no validation rules for MaxAmount

	if len(errors) > 0 {
		return StakingPoolUpdated_TickConfigDetailMultiError(errors)
	}

	return nil
}

// StakingPoolUpdated_TickConfigDetailMultiError is an error wrapping multiple
// validation errors returned by
// StakingPoolUpdated_TickConfigDetail.ValidateAll() if the designated
// constraints aren't met.
type StakingPoolUpdated_TickConfigDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StakingPoolUpdated_TickConfigDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StakingPoolUpdated_TickConfigDetailMultiError) AllErrors() []error { return m }

// StakingPoolUpdated_TickConfigDetailValidationError is the validation error
// returned by StakingPoolUpdated_TickConfigDetail.Validate if the designated
// constraints aren't met.
type StakingPoolUpdated_TickConfigDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StakingPoolUpdated_TickConfigDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StakingPoolUpdated_TickConfigDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StakingPoolUpdated_TickConfigDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StakingPoolUpdated_TickConfigDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StakingPoolUpdated_TickConfigDetailValidationError) ErrorName() string {
	return "StakingPoolUpdated_TickConfigDetailValidationError"
}

// Error satisfies the builtin error interface
func (e StakingPoolUpdated_TickConfigDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStakingPoolUpdated_TickConfigDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StakingPoolUpdated_TickConfigDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StakingPoolUpdated_TickConfigDetailValidationError{}
