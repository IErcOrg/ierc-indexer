// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: indexer/indexer.proto

package indexer

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SubscribeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SubscribeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubscribeRequestMultiError, or nil if none found.
func (m *SubscribeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StartBlock

	if len(errors) > 0 {
		return SubscribeRequestMultiError(errors)
	}

	return nil
}

// SubscribeRequestMultiError is an error wrapping multiple validation errors
// returned by SubscribeRequest.ValidateAll() if the designated constraints
// aren't met.
type SubscribeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribeRequestMultiError) AllErrors() []error { return m }

// SubscribeRequestValidationError is the validation error returned by
// SubscribeRequest.Validate if the designated constraints aren't met.
type SubscribeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeRequestValidationError) ErrorName() string { return "SubscribeRequestValidationError" }

// Error satisfies the builtin error interface
func (e SubscribeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeRequestValidationError{}

// Validate checks the field values on SubscribeReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SubscribeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribeReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SubscribeReplyMultiError,
// or nil if none found.
func (m *SubscribeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BlockNumber

	// no validation rules for PrevBlockNumber

	for idx, item := range m.GetEvents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubscribeReplyValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubscribeReplyValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubscribeReplyValidationError{
					field:  fmt.Sprintf("Events[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SubscribeReplyMultiError(errors)
	}

	return nil
}

// SubscribeReplyMultiError is an error wrapping multiple validation errors
// returned by SubscribeReply.ValidateAll() if the designated constraints
// aren't met.
type SubscribeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribeReplyMultiError) AllErrors() []error { return m }

// SubscribeReplyValidationError is the validation error returned by
// SubscribeReply.Validate if the designated constraints aren't met.
type SubscribeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeReplyValidationError) ErrorName() string { return "SubscribeReplyValidationError" }

// Error satisfies the builtin error interface
func (e SubscribeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeReplyValidationError{}

// Validate checks the field values on SubscribeSystemStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubscribeSystemStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribeSystemStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubscribeSystemStatusRequestMultiError, or nil if none found.
func (m *SubscribeSystemStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribeSystemStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SubscribeSystemStatusRequestMultiError(errors)
	}

	return nil
}

// SubscribeSystemStatusRequestMultiError is an error wrapping multiple
// validation errors returned by SubscribeSystemStatusRequest.ValidateAll() if
// the designated constraints aren't met.
type SubscribeSystemStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribeSystemStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribeSystemStatusRequestMultiError) AllErrors() []error { return m }

// SubscribeSystemStatusRequestValidationError is the validation error returned
// by SubscribeSystemStatusRequest.Validate if the designated constraints
// aren't met.
type SubscribeSystemStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeSystemStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeSystemStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeSystemStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeSystemStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeSystemStatusRequestValidationError) ErrorName() string {
	return "SubscribeSystemStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubscribeSystemStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeSystemStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeSystemStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeSystemStatusRequestValidationError{}

// Validate checks the field values on SubscribeSystemStatusReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubscribeSystemStatusReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribeSystemStatusReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubscribeSystemStatusReplyMultiError, or nil if none found.
func (m *SubscribeSystemStatusReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribeSystemStatusReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LatestBlock

	// no validation rules for IndexedBlock

	// no validation rules for SyncBlock

	if len(errors) > 0 {
		return SubscribeSystemStatusReplyMultiError(errors)
	}

	return nil
}

// SubscribeSystemStatusReplyMultiError is an error wrapping multiple
// validation errors returned by SubscribeSystemStatusReply.ValidateAll() if
// the designated constraints aren't met.
type SubscribeSystemStatusReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribeSystemStatusReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribeSystemStatusReplyMultiError) AllErrors() []error { return m }

// SubscribeSystemStatusReplyValidationError is the validation error returned
// by SubscribeSystemStatusReply.Validate if the designated constraints aren't met.
type SubscribeSystemStatusReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeSystemStatusReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeSystemStatusReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeSystemStatusReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeSystemStatusReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeSystemStatusReplyValidationError) ErrorName() string {
	return "SubscribeSystemStatusReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SubscribeSystemStatusReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeSystemStatusReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeSystemStatusReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeSystemStatusReplyValidationError{}

// Validate checks the field values on QueryEventsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryEventsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryEventsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryEventsRequestMultiError, or nil if none found.
func (m *QueryEventsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryEventsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StartBlock

	// no validation rules for Size

	if len(errors) > 0 {
		return QueryEventsRequestMultiError(errors)
	}

	return nil
}

// QueryEventsRequestMultiError is an error wrapping multiple validation errors
// returned by QueryEventsRequest.ValidateAll() if the designated constraints
// aren't met.
type QueryEventsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryEventsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryEventsRequestMultiError) AllErrors() []error { return m }

// QueryEventsRequestValidationError is the validation error returned by
// QueryEventsRequest.Validate if the designated constraints aren't met.
type QueryEventsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryEventsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryEventsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryEventsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryEventsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryEventsRequestValidationError) ErrorName() string {
	return "QueryEventsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryEventsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryEventsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryEventsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryEventsRequestValidationError{}

// Validate checks the field values on QueryEventsReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryEventsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryEventsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryEventsReplyMultiError, or nil if none found.
func (m *QueryEventsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryEventsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEventByBlocks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryEventsReplyValidationError{
						field:  fmt.Sprintf("EventByBlocks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryEventsReplyValidationError{
						field:  fmt.Sprintf("EventByBlocks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryEventsReplyValidationError{
					field:  fmt.Sprintf("EventByBlocks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QueryEventsReplyMultiError(errors)
	}

	return nil
}

// QueryEventsReplyMultiError is an error wrapping multiple validation errors
// returned by QueryEventsReply.ValidateAll() if the designated constraints
// aren't met.
type QueryEventsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryEventsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryEventsReplyMultiError) AllErrors() []error { return m }

// QueryEventsReplyValidationError is the validation error returned by
// QueryEventsReply.Validate if the designated constraints aren't met.
type QueryEventsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryEventsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryEventsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryEventsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryEventsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryEventsReplyValidationError) ErrorName() string { return "QueryEventsReplyValidationError" }

// Error satisfies the builtin error interface
func (e QueryEventsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryEventsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryEventsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryEventsReplyValidationError{}

// Validate checks the field values on QuerySystemStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QuerySystemStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuerySystemStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QuerySystemStatusRequestMultiError, or nil if none found.
func (m *QuerySystemStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QuerySystemStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return QuerySystemStatusRequestMultiError(errors)
	}

	return nil
}

// QuerySystemStatusRequestMultiError is an error wrapping multiple validation
// errors returned by QuerySystemStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type QuerySystemStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuerySystemStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuerySystemStatusRequestMultiError) AllErrors() []error { return m }

// QuerySystemStatusRequestValidationError is the validation error returned by
// QuerySystemStatusRequest.Validate if the designated constraints aren't met.
type QuerySystemStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuerySystemStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuerySystemStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuerySystemStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuerySystemStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuerySystemStatusRequestValidationError) ErrorName() string {
	return "QuerySystemStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QuerySystemStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuerySystemStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuerySystemStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuerySystemStatusRequestValidationError{}

// Validate checks the field values on QuerySystemStatusReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QuerySystemStatusReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuerySystemStatusReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QuerySystemStatusReplyMultiError, or nil if none found.
func (m *QuerySystemStatusReply) ValidateAll() error {
	return m.validate(true)
}

func (m *QuerySystemStatusReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SyncBlock

	if len(errors) > 0 {
		return QuerySystemStatusReplyMultiError(errors)
	}

	return nil
}

// QuerySystemStatusReplyMultiError is an error wrapping multiple validation
// errors returned by QuerySystemStatusReply.ValidateAll() if the designated
// constraints aren't met.
type QuerySystemStatusReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuerySystemStatusReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuerySystemStatusReplyMultiError) AllErrors() []error { return m }

// QuerySystemStatusReplyValidationError is the validation error returned by
// QuerySystemStatusReply.Validate if the designated constraints aren't met.
type QuerySystemStatusReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuerySystemStatusReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuerySystemStatusReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuerySystemStatusReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuerySystemStatusReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuerySystemStatusReplyValidationError) ErrorName() string {
	return "QuerySystemStatusReplyValidationError"
}

// Error satisfies the builtin error interface
func (e QuerySystemStatusReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuerySystemStatusReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuerySystemStatusReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuerySystemStatusReplyValidationError{}

// Validate checks the field values on CheckTransferRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckTransferRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckTransferRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckTransferRequestMultiError, or nil if none found.
func (m *CheckTransferRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckTransferRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Hash

	// no validation rules for PositionIndex

	if len(errors) > 0 {
		return CheckTransferRequestMultiError(errors)
	}

	return nil
}

// CheckTransferRequestMultiError is an error wrapping multiple validation
// errors returned by CheckTransferRequest.ValidateAll() if the designated
// constraints aren't met.
type CheckTransferRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckTransferRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckTransferRequestMultiError) AllErrors() []error { return m }

// CheckTransferRequestValidationError is the validation error returned by
// CheckTransferRequest.Validate if the designated constraints aren't met.
type CheckTransferRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckTransferRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckTransferRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckTransferRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckTransferRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckTransferRequestValidationError) ErrorName() string {
	return "CheckTransferRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckTransferRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckTransferRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckTransferRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckTransferRequestValidationError{}

// Validate checks the field values on CheckTransferReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckTransferReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckTransferReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckTransferReplyMultiError, or nil if none found.
func (m *CheckTransferReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckTransferReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CheckTransferReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CheckTransferReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CheckTransferReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CheckTransferReplyMultiError(errors)
	}

	return nil
}

// CheckTransferReplyMultiError is an error wrapping multiple validation errors
// returned by CheckTransferReply.ValidateAll() if the designated constraints
// aren't met.
type CheckTransferReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckTransferReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckTransferReplyMultiError) AllErrors() []error { return m }

// CheckTransferReplyValidationError is the validation error returned by
// CheckTransferReply.Validate if the designated constraints aren't met.
type CheckTransferReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckTransferReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckTransferReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckTransferReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckTransferReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckTransferReplyValidationError) ErrorName() string {
	return "CheckTransferReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CheckTransferReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckTransferReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckTransferReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckTransferReplyValidationError{}

// Validate checks the field values on QueryEventsReply_EventsByBlock with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryEventsReply_EventsByBlock) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryEventsReply_EventsByBlock with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// QueryEventsReply_EventsByBlockMultiError, or nil if none found.
func (m *QueryEventsReply_EventsByBlock) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryEventsReply_EventsByBlock) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BlockNumber

	// no validation rules for PrevBlockNumber

	for idx, item := range m.GetEvents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryEventsReply_EventsByBlockValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryEventsReply_EventsByBlockValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryEventsReply_EventsByBlockValidationError{
					field:  fmt.Sprintf("Events[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QueryEventsReply_EventsByBlockMultiError(errors)
	}

	return nil
}

// QueryEventsReply_EventsByBlockMultiError is an error wrapping multiple
// validation errors returned by QueryEventsReply_EventsByBlock.ValidateAll()
// if the designated constraints aren't met.
type QueryEventsReply_EventsByBlockMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryEventsReply_EventsByBlockMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryEventsReply_EventsByBlockMultiError) AllErrors() []error { return m }

// QueryEventsReply_EventsByBlockValidationError is the validation error
// returned by QueryEventsReply_EventsByBlock.Validate if the designated
// constraints aren't met.
type QueryEventsReply_EventsByBlockValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryEventsReply_EventsByBlockValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryEventsReply_EventsByBlockValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryEventsReply_EventsByBlockValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryEventsReply_EventsByBlockValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryEventsReply_EventsByBlockValidationError) ErrorName() string {
	return "QueryEventsReply_EventsByBlockValidationError"
}

// Error satisfies the builtin error interface
func (e QueryEventsReply_EventsByBlockValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryEventsReply_EventsByBlock.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryEventsReply_EventsByBlockValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryEventsReply_EventsByBlockValidationError{}

// Validate checks the field values on CheckTransferReply_TransferRecord with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CheckTransferReply_TransferRecord) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckTransferReply_TransferRecord
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CheckTransferReply_TransferRecordMultiError, or nil if none found.
func (m *CheckTransferReply_TransferRecord) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckTransferReply_TransferRecord) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sender

	// no validation rules for Receiver

	// no validation rules for Tick

	// no validation rules for Amount

	// no validation rules for Status

	if len(errors) > 0 {
		return CheckTransferReply_TransferRecordMultiError(errors)
	}

	return nil
}

// CheckTransferReply_TransferRecordMultiError is an error wrapping multiple
// validation errors returned by
// CheckTransferReply_TransferRecord.ValidateAll() if the designated
// constraints aren't met.
type CheckTransferReply_TransferRecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckTransferReply_TransferRecordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckTransferReply_TransferRecordMultiError) AllErrors() []error { return m }

// CheckTransferReply_TransferRecordValidationError is the validation error
// returned by CheckTransferReply_TransferRecord.Validate if the designated
// constraints aren't met.
type CheckTransferReply_TransferRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckTransferReply_TransferRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckTransferReply_TransferRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckTransferReply_TransferRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckTransferReply_TransferRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckTransferReply_TransferRecordValidationError) ErrorName() string {
	return "CheckTransferReply_TransferRecordValidationError"
}

// Error satisfies the builtin error interface
func (e CheckTransferReply_TransferRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckTransferReply_TransferRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckTransferReply_TransferRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckTransferReply_TransferRecordValidationError{}
