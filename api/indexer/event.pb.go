// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: indexer/event.proto

package indexer

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Operate int32

const (
	Operate_OPERATE_UNSPECIFIED Operate = 0
	Operate_Deploy              Operate = 1
	Operate_Mint                Operate = 2
	Operate_Transfer            Operate = 3
	Operate_FreezeSell          Operate = 4
	Operate_UnfreezeSell        Operate = 5
	Operate_ProxyTransfer       Operate = 6
	Operate_StakeConfig         Operate = 7
	Operate_Stake               Operate = 8
	Operate_UnStake             Operate = 9
	Operate_ProxyUnStake        Operate = 10
	Operate_Modify              Operate = 11
	Operate_ClaimAirdrop        Operate = 12
)

// Enum value maps for Operate.
var (
	Operate_name = map[int32]string{
		0:  "OPERATE_UNSPECIFIED",
		1:  "Deploy",
		2:  "Mint",
		3:  "Transfer",
		4:  "FreezeSell",
		5:  "UnfreezeSell",
		6:  "ProxyTransfer",
		7:  "StakeConfig",
		8:  "Stake",
		9:  "UnStake",
		10: "ProxyUnStake",
		11: "Modify",
		12: "ClaimAirdrop",
	}
	Operate_value = map[string]int32{
		"OPERATE_UNSPECIFIED": 0,
		"Deploy":              1,
		"Mint":                2,
		"Transfer":            3,
		"FreezeSell":          4,
		"UnfreezeSell":        5,
		"ProxyTransfer":       6,
		"StakeConfig":         7,
		"Stake":               8,
		"UnStake":             9,
		"ProxyUnStake":        10,
		"Modify":              11,
		"ClaimAirdrop":        12,
	}
)

func (x Operate) Enum() *Operate {
	p := new(Operate)
	*p = x
	return p
}

func (x Operate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Operate) Descriptor() protoreflect.EnumDescriptor {
	return file_indexer_event_proto_enumTypes[0].Descriptor()
}

func (Operate) Type() protoreflect.EnumType {
	return &file_indexer_event_proto_enumTypes[0]
}

func (x Operate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Operate.Descriptor instead.
func (Operate) EnumDescriptor() ([]byte, []int) {
	return file_indexer_event_proto_rawDescGZIP(), []int{0}
}

// IERC20 Tick
type IERC20TickCreated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields


	Protocol string `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Operate Operate `protobuf:"varint,2,opt,name=operate,proto3,enum=api.indexer.Operate" json:"operate,omitempty"`
	Tick string `protobuf:"bytes,3,opt,name=tick,proto3" json:"tick,omitempty"`
	Decimals int64 `protobuf:"varint,4,opt,name=decimals,proto3" json:"decimals,omitempty"`
	MaxSupply string `protobuf:"bytes,5,opt,name=max_supply,json=maxSupply,proto3" json:"max_supply,omitempty"`
	Limit string `protobuf:"bytes,6,opt,name=limit,proto3" json:"limit,omitempty"`
	WalletLimit string `protobuf:"bytes,7,opt,name=wallet_limit,json=walletLimit,proto3" json:"wallet_limit,omitempty"`
	Workc string `protobuf:"bytes,8,opt,name=workc,proto3" json:"workc,omitempty"`
	Creator string `protobuf:"bytes,9,opt,name=creator,proto3" json:"creator,omitempty"`
	Nonce string `protobuf:"bytes,10,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *IERC20TickCreated) Reset() {
	*x = IERC20TickCreated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_event_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IERC20TickCreated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IERC20TickCreated) ProtoMessage() {}

func (x *IERC20TickCreated) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_event_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IERC20TickCreated.ProtoReflect.Descriptor instead.
func (*IERC20TickCreated) Descriptor() ([]byte, []int) {
	return file_indexer_event_proto_rawDescGZIP(), []int{0}
}

func (x *IERC20TickCreated) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *IERC20TickCreated) GetOperate() Operate {
	if x != nil {
		return x.Operate
	}
	return Operate_OPERATE_UNSPECIFIED
}

func (x *IERC20TickCreated) GetTick() string {
	if x != nil {
		return x.Tick
	}
	return ""
}

func (x *IERC20TickCreated) GetDecimals() int64 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *IERC20TickCreated) GetMaxSupply() string {
	if x != nil {
		return x.MaxSupply
	}
	return ""
}

func (x *IERC20TickCreated) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *IERC20TickCreated) GetWalletLimit() string {
	if x != nil {
		return x.WalletLimit
	}
	return ""
}

func (x *IERC20TickCreated) GetWorkc() string {
	if x != nil {
		return x.Workc
	}
	return ""
}

func (x *IERC20TickCreated) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *IERC20TickCreated) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

type IERC20Minted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol string `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Operate Operate `protobuf:"varint,2,opt,name=operate,proto3,enum=api.indexer.Operate" json:"operate,omitempty"`
	Tick string `protobuf:"bytes,3,opt,name=tick,proto3" json:"tick,omitempty"`
	From string `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`
	To string `protobuf:"bytes,5,opt,name=to,proto3" json:"to,omitempty"`
	Nonce string `protobuf:"bytes,6,opt,name=nonce,proto3" json:"nonce,omitempty"`
	MintedAmount string `protobuf:"bytes,7,opt,name=minted_amount,json=mintedAmount,proto3" json:"minted_amount,omitempty"`
	Gas      string `protobuf:"bytes,8,opt,name=gas,proto3" json:"gas,omitempty"`
	GasPrice string `protobuf:"bytes,9,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
}

func (x *IERC20Minted) Reset() {
	*x = IERC20Minted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_event_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IERC20Minted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IERC20Minted) ProtoMessage() {}

func (x *IERC20Minted) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_event_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IERC20Minted.ProtoReflect.Descriptor instead.
func (*IERC20Minted) Descriptor() ([]byte, []int) {
	return file_indexer_event_proto_rawDescGZIP(), []int{1}
}

func (x *IERC20Minted) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *IERC20Minted) GetOperate() Operate {
	if x != nil {
		return x.Operate
	}
	return Operate_OPERATE_UNSPECIFIED
}

func (x *IERC20Minted) GetTick() string {
	if x != nil {
		return x.Tick
	}
	return ""
}

func (x *IERC20Minted) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *IERC20Minted) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *IERC20Minted) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *IERC20Minted) GetMintedAmount() string {
	if x != nil {
		return x.MintedAmount
	}
	return ""
}

func (x *IERC20Minted) GetGas() string {
	if x != nil {
		return x.Gas
	}
	return ""
}

func (x *IERC20Minted) GetGasPrice() string {
	if x != nil {
		return x.GasPrice
	}
	return ""
}

type IERCPoWTickCreated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol string `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Operate Operate `protobuf:"varint,2,opt,name=operate,proto3,enum=api.indexer.Operate" json:"operate,omitempty"`
	// ierc20 tick
	Tick              string                                 `protobuf:"bytes,3,opt,name=tick,proto3" json:"tick,omitempty"`
	Decimals          int64                                  `protobuf:"varint,4,opt,name=decimals,proto3" json:"decimals,omitempty"`
	MaxSupply         string                                 `protobuf:"bytes,5,opt,name=max_supply,json=maxSupply,proto3" json:"max_supply,omitempty"`
	TokenomicsDetails []*IERCPoWTickCreated_TokenomicsDetail `protobuf:"bytes,6,rep,name=tokenomics_details,json=tokenomicsDetails,proto3" json:"tokenomics_details,omitempty"`
	Rule              *IERCPoWTickCreated_Rule               `protobuf:"bytes,7,opt,name=rule,proto3" json:"rule,omitempty"`
	Creator           string                                 `protobuf:"bytes,8,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (x *IERCPoWTickCreated) Reset() {
	*x = IERCPoWTickCreated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_event_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IERCPoWTickCreated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IERCPoWTickCreated) ProtoMessage() {}

func (x *IERCPoWTickCreated) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_event_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IERCPoWTickCreated.ProtoReflect.Descriptor instead.
func (*IERCPoWTickCreated) Descriptor() ([]byte, []int) {
	return file_indexer_event_proto_rawDescGZIP(), []int{2}
}

func (x *IERCPoWTickCreated) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *IERCPoWTickCreated) GetOperate() Operate {
	if x != nil {
		return x.Operate
	}
	return Operate_OPERATE_UNSPECIFIED
}

func (x *IERCPoWTickCreated) GetTick() string {
	if x != nil {
		return x.Tick
	}
	return ""
}

func (x *IERCPoWTickCreated) GetDecimals() int64 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *IERCPoWTickCreated) GetMaxSupply() string {
	if x != nil {
		return x.MaxSupply
	}
	return ""
}

func (x *IERCPoWTickCreated) GetTokenomicsDetails() []*IERCPoWTickCreated_TokenomicsDetail {
	if x != nil {
		return x.TokenomicsDetails
	}
	return nil
}

func (x *IERCPoWTickCreated) GetRule() *IERCPoWTickCreated_Rule {
	if x != nil {
		return x.Rule
	}
	return nil
}

func (x *IERCPoWTickCreated) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

type IERCPoWMinted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol string `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Operate Operate `protobuf:"varint,2,opt,name=operate,proto3,enum=api.indexer.Operate" json:"operate,omitempty"`
	// ierc20 tick
	Tick string `protobuf:"bytes,3,opt,name=tick,proto3" json:"tick,omitempty"`
	From string `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`
	To string `protobuf:"bytes,5,opt,name=to,proto3" json:"to,omitempty"`
	Nonce string `protobuf:"bytes,6,opt,name=nonce,proto3" json:"nonce,omitempty"`
	IsPow           bool   `protobuf:"varint,7,opt,name=is_pow,json=isPow,proto3" json:"is_pow,omitempty"`
	PowTotalShare   string `protobuf:"bytes,8,opt,name=pow_total_share,json=powTotalShare,proto3" json:"pow_total_share,omitempty"`
	PowMinerShare   string `protobuf:"bytes,9,opt,name=pow_miner_share,json=powMinerShare,proto3" json:"pow_miner_share,omitempty"`
	PowMintedAmount string `protobuf:"bytes,10,opt,name=pow_minted_amount,json=powMintedAmount,proto3" json:"pow_minted_amount,omitempty"`
	IsPos           bool   `protobuf:"varint,11,opt,name=is_pos,json=isPos,proto3" json:"is_pos,omitempty"`
	PosTotalShare   string `protobuf:"bytes,12,opt,name=pos_total_share,json=posTotalShare,proto3" json:"pos_total_share,omitempty"`
	PosMinerShare   string `protobuf:"bytes,13,opt,name=pos_miner_share,json=posMinerShare,proto3" json:"pos_miner_share,omitempty"`
	PosMintedAmount string `protobuf:"bytes,14,opt,name=pos_minted_amount,json=posMintedAmount,proto3" json:"pos_minted_amount,omitempty"`
	Gas             string `protobuf:"bytes,15,opt,name=gas,proto3" json:"gas,omitempty"`
	GasPrice        string `protobuf:"bytes,16,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	IsAirdrop     bool   `protobuf:"varint,17,opt,name=is_airdrop,json=isAirdrop,proto3" json:"is_airdrop,omitempty"`
	AirdropAmount string `protobuf:"bytes,18,opt,name=airdrop_amount,json=airdropAmount,proto3" json:"airdrop_amount,omitempty"`
	BurnedAmount string `protobuf:"bytes,19,opt,name=burned_amount,json=burnedAmount,proto3" json:"burned_amount,omitempty"`
}

func (x *IERCPoWMinted) Reset() {
	*x = IERCPoWMinted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_event_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IERCPoWMinted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IERCPoWMinted) ProtoMessage() {}

func (x *IERCPoWMinted) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_event_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IERCPoWMinted.ProtoReflect.Descriptor instead.
func (*IERCPoWMinted) Descriptor() ([]byte, []int) {
	return file_indexer_event_proto_rawDescGZIP(), []int{3}
}

func (x *IERCPoWMinted) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *IERCPoWMinted) GetOperate() Operate {
	if x != nil {
		return x.Operate
	}
	return Operate_OPERATE_UNSPECIFIED
}

func (x *IERCPoWMinted) GetTick() string {
	if x != nil {
		return x.Tick
	}
	return ""
}

func (x *IERCPoWMinted) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *IERCPoWMinted) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *IERCPoWMinted) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *IERCPoWMinted) GetIsPow() bool {
	if x != nil {
		return x.IsPow
	}
	return false
}

func (x *IERCPoWMinted) GetPowTotalShare() string {
	if x != nil {
		return x.PowTotalShare
	}
	return ""
}

func (x *IERCPoWMinted) GetPowMinerShare() string {
	if x != nil {
		return x.PowMinerShare
	}
	return ""
}

func (x *IERCPoWMinted) GetPowMintedAmount() string {
	if x != nil {
		return x.PowMintedAmount
	}
	return ""
}

func (x *IERCPoWMinted) GetIsPos() bool {
	if x != nil {
		return x.IsPos
	}
	return false
}

func (x *IERCPoWMinted) GetPosTotalShare() string {
	if x != nil {
		return x.PosTotalShare
	}
	return ""
}

func (x *IERCPoWMinted) GetPosMinerShare() string {
	if x != nil {
		return x.PosMinerShare
	}
	return ""
}

func (x *IERCPoWMinted) GetPosMintedAmount() string {
	if x != nil {
		return x.PosMintedAmount
	}
	return ""
}

func (x *IERCPoWMinted) GetGas() string {
	if x != nil {
		return x.Gas
	}
	return ""
}

func (x *IERCPoWMinted) GetGasPrice() string {
	if x != nil {
		return x.GasPrice
	}
	return ""
}

func (x *IERCPoWMinted) GetIsAirdrop() bool {
	if x != nil {
		return x.IsAirdrop
	}
	return false
}

func (x *IERCPoWMinted) GetAirdropAmount() string {
	if x != nil {
		return x.AirdropAmount
	}
	return ""
}

func (x *IERCPoWMinted) GetBurnedAmount() string {
	if x != nil {
		return x.BurnedAmount
	}
	return ""
}

type TickTransferred struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol string `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Operate Operate `protobuf:"varint,2,opt,name=operate,proto3,enum=api.indexer.Operate" json:"operate,omitempty"`
	Tick string `protobuf:"bytes,3,opt,name=tick,proto3" json:"tick,omitempty"`
	From string `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`
	To string `protobuf:"bytes,5,opt,name=to,proto3" json:"to,omitempty"`
	Amount string `protobuf:"bytes,6,opt,name=amount,proto3" json:"amount,omitempty"`
	EthValue string `protobuf:"bytes,7,opt,name=eth_value,json=ethValue,proto3" json:"eth_value,omitempty"`
	GasPrice string `protobuf:"bytes,8,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	SignerNonce string `protobuf:"bytes,9,opt,name=signer_nonce,json=signerNonce,proto3" json:"signer_nonce,omitempty"`
	Sign string `protobuf:"bytes,10,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (x *TickTransferred) Reset() {
	*x = TickTransferred{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_event_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TickTransferred) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TickTransferred) ProtoMessage() {}

func (x *TickTransferred) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_event_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TickTransferred.ProtoReflect.Descriptor instead.
func (*TickTransferred) Descriptor() ([]byte, []int) {
	return file_indexer_event_proto_rawDescGZIP(), []int{4}
}

func (x *TickTransferred) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *TickTransferred) GetOperate() Operate {
	if x != nil {
		return x.Operate
	}
	return Operate_OPERATE_UNSPECIFIED
}

func (x *TickTransferred) GetTick() string {
	if x != nil {
		return x.Tick
	}
	return ""
}

func (x *TickTransferred) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *TickTransferred) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *TickTransferred) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *TickTransferred) GetEthValue() string {
	if x != nil {
		return x.EthValue
	}
	return ""
}

func (x *TickTransferred) GetGasPrice() string {
	if x != nil {
		return x.GasPrice
	}
	return ""
}

func (x *TickTransferred) GetSignerNonce() string {
	if x != nil {
		return x.SignerNonce
	}
	return ""
}

func (x *TickTransferred) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

type StakingPoolUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol string `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Operate Operate `protobuf:"varint,2,opt,name=operate,proto3,enum=api.indexer.Operate" json:"operate,omitempty"`
	From string `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	To string `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
	Pool string `protobuf:"bytes,5,opt,name=pool,proto3" json:"pool,omitempty"`
	PoolId uint64 `protobuf:"varint,6,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	Name string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Owner string `protobuf:"bytes,8,opt,name=owner,proto3" json:"owner,omitempty"`
	Admins []string `protobuf:"bytes,9,rep,name=admins,proto3" json:"admins,omitempty"`
	Details []*StakingPoolUpdated_TickConfigDetail `protobuf:"bytes,10,rep,name=details,proto3" json:"details,omitempty"`
	StopBlock uint64 `protobuf:"varint,11,opt,name=stop_block,json=stopBlock,proto3" json:"stop_block,omitempty"`
}

func (x *StakingPoolUpdated) Reset() {
	*x = StakingPoolUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_event_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakingPoolUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakingPoolUpdated) ProtoMessage() {}

func (x *StakingPoolUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_event_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakingPoolUpdated.ProtoReflect.Descriptor instead.
func (*StakingPoolUpdated) Descriptor() ([]byte, []int) {
	return file_indexer_event_proto_rawDescGZIP(), []int{5}
}

func (x *StakingPoolUpdated) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *StakingPoolUpdated) GetOperate() Operate {
	if x != nil {
		return x.Operate
	}
	return Operate_OPERATE_UNSPECIFIED
}

func (x *StakingPoolUpdated) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *StakingPoolUpdated) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *StakingPoolUpdated) GetPool() string {
	if x != nil {
		return x.Pool
	}
	return ""
}

func (x *StakingPoolUpdated) GetPoolId() uint64 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

func (x *StakingPoolUpdated) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StakingPoolUpdated) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *StakingPoolUpdated) GetAdmins() []string {
	if x != nil {
		return x.Admins
	}
	return nil
}

func (x *StakingPoolUpdated) GetDetails() []*StakingPoolUpdated_TickConfigDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *StakingPoolUpdated) GetStopBlock() uint64 {
	if x != nil {
		return x.StopBlock
	}
	return 0
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	BlockNumber uint64 `protobuf:"varint,1,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	TxHash string `protobuf:"bytes,2,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	PosInIercTxs int32 `protobuf:"varint,3,opt,name=pos_in_ierc_txs,json=posInIercTxs,proto3" json:"pos_in_ierc_txs,omitempty"`
	From string `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`
	To string `protobuf:"bytes,5,opt,name=to,proto3" json:"to,omitempty"`
	Value string `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
	EventAt int64 `protobuf:"varint,7,opt,name=event_at,json=eventAt,proto3" json:"event_at,omitempty"`
	ErrCode int32 `protobuf:"varint,8,opt,name=err_code,json=errCode,proto3" json:"err_code,omitempty"`
	ErrReason string `protobuf:"bytes,9,opt,name=err_reason,json=errReason,proto3" json:"err_reason,omitempty"`
	// Types that are assignable to Event:
	//
	//	*Event_TickCreated
	//	*Event_Minted
	//	*Event_PowTickCreated
	//	*Event_PowMinted
	//	*Event_TickTransferred
	//	*Event_PoolUpdated
	Event isEvent_Event `protobuf_oneof:"event"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_event_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_event_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_indexer_event_proto_rawDescGZIP(), []int{6}
}

func (x *Event) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *Event) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *Event) GetPosInIercTxs() int32 {
	if x != nil {
		return x.PosInIercTxs
	}
	return 0
}

func (x *Event) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Event) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *Event) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Event) GetEventAt() int64 {
	if x != nil {
		return x.EventAt
	}
	return 0
}

func (x *Event) GetErrCode() int32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

func (x *Event) GetErrReason() string {
	if x != nil {
		return x.ErrReason
	}
	return ""
}

func (m *Event) GetEvent() isEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *Event) GetTickCreated() *IERC20TickCreated {
	if x, ok := x.GetEvent().(*Event_TickCreated); ok {
		return x.TickCreated
	}
	return nil
}

func (x *Event) GetMinted() *IERC20Minted {
	if x, ok := x.GetEvent().(*Event_Minted); ok {
		return x.Minted
	}
	return nil
}

func (x *Event) GetPowTickCreated() *IERCPoWTickCreated {
	if x, ok := x.GetEvent().(*Event_PowTickCreated); ok {
		return x.PowTickCreated
	}
	return nil
}

func (x *Event) GetPowMinted() *IERCPoWMinted {
	if x, ok := x.GetEvent().(*Event_PowMinted); ok {
		return x.PowMinted
	}
	return nil
}

func (x *Event) GetTickTransferred() *TickTransferred {
	if x, ok := x.GetEvent().(*Event_TickTransferred); ok {
		return x.TickTransferred
	}
	return nil
}

func (x *Event) GetPoolUpdated() *StakingPoolUpdated {
	if x, ok := x.GetEvent().(*Event_PoolUpdated); ok {
		return x.PoolUpdated
	}
	return nil
}

type isEvent_Event interface {
	isEvent_Event()
}

type Event_TickCreated struct {
	// ierc20 tick
	TickCreated *IERC20TickCreated `protobuf:"bytes,20,opt,name=tick_created,json=tickCreated,proto3,oneof"`
}

type Event_Minted struct {
	Minted *IERC20Minted `protobuf:"bytes,21,opt,name=minted,proto3,oneof"`
}

type Event_PowTickCreated struct {
	// ierc_pow
	PowTickCreated *IERCPoWTickCreated `protobuf:"bytes,22,opt,name=pow_tick_created,json=powTickCreated,proto3,oneof"`
}

type Event_PowMinted struct {
	PowMinted *IERCPoWMinted `protobuf:"bytes,23,opt,name=pow_minted,json=powMinted,proto3,oneof"`
}

type Event_TickTransferred struct {
	// ierc20 & ierc_pow & staking
	TickTransferred *TickTransferred `protobuf:"bytes,24,opt,name=tick_transferred,json=tickTransferred,proto3,oneof"`
}

type Event_PoolUpdated struct {
	// staking
	PoolUpdated *StakingPoolUpdated `protobuf:"bytes,25,opt,name=pool_updated,json=poolUpdated,proto3,oneof"`
}

func (*Event_TickCreated) isEvent_Event() {}

func (*Event_Minted) isEvent_Event() {}

func (*Event_PowTickCreated) isEvent_Event() {}

func (*Event_PowMinted) isEvent_Event() {}

func (*Event_TickTransferred) isEvent_Event() {}

func (*Event_PoolUpdated) isEvent_Event() {}

type IERCPoWTickCreated_TokenomicsDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockNumber uint64 `protobuf:"varint,1,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	Amount      string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *IERCPoWTickCreated_TokenomicsDetail) Reset() {
	*x = IERCPoWTickCreated_TokenomicsDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_event_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IERCPoWTickCreated_TokenomicsDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IERCPoWTickCreated_TokenomicsDetail) ProtoMessage() {}

func (x *IERCPoWTickCreated_TokenomicsDetail) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_event_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IERCPoWTickCreated_TokenomicsDetail.ProtoReflect.Descriptor instead.
func (*IERCPoWTickCreated_TokenomicsDetail) Descriptor() ([]byte, []int) {
	return file_indexer_event_proto_rawDescGZIP(), []int{2, 0}
}

func (x *IERCPoWTickCreated_TokenomicsDetail) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *IERCPoWTickCreated_TokenomicsDetail) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type IERCPoWTickCreated_Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PowRatio        string `protobuf:"bytes,1,opt,name=pow_ratio,json=powRatio,proto3" json:"pow_ratio,omitempty"`
	MinWorkc        string `protobuf:"bytes,2,opt,name=min_workc,json=minWorkc,proto3" json:"min_workc,omitempty"`
	DifficultyRatio string `protobuf:"bytes,3,opt,name=difficulty_ratio,json=difficultyRatio,proto3" json:"difficulty_ratio,omitempty"`
	PosRatio        string `protobuf:"bytes,4,opt,name=pos_ratio,json=posRatio,proto3" json:"pos_ratio,omitempty"`
	PosPool         string `protobuf:"bytes,5,opt,name=pos_pool,json=posPool,proto3" json:"pos_pool,omitempty"`
}

func (x *IERCPoWTickCreated_Rule) Reset() {
	*x = IERCPoWTickCreated_Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_event_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IERCPoWTickCreated_Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IERCPoWTickCreated_Rule) ProtoMessage() {}

func (x *IERCPoWTickCreated_Rule) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_event_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IERCPoWTickCreated_Rule.ProtoReflect.Descriptor instead.
func (*IERCPoWTickCreated_Rule) Descriptor() ([]byte, []int) {
	return file_indexer_event_proto_rawDescGZIP(), []int{2, 1}
}

func (x *IERCPoWTickCreated_Rule) GetPowRatio() string {
	if x != nil {
		return x.PowRatio
	}
	return ""
}

func (x *IERCPoWTickCreated_Rule) GetMinWorkc() string {
	if x != nil {
		return x.MinWorkc
	}
	return ""
}

func (x *IERCPoWTickCreated_Rule) GetDifficultyRatio() string {
	if x != nil {
		return x.DifficultyRatio
	}
	return ""
}

func (x *IERCPoWTickCreated_Rule) GetPosRatio() string {
	if x != nil {
		return x.PosRatio
	}
	return ""
}

func (x *IERCPoWTickCreated_Rule) GetPosPool() string {
	if x != nil {
		return x.PosPool
	}
	return ""
}

type StakingPoolUpdated_TickConfigDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tick      string `protobuf:"bytes,1,opt,name=tick,proto3" json:"tick,omitempty"`
	Ratio     string `protobuf:"bytes,2,opt,name=ratio,proto3" json:"ratio,omitempty"`
	MaxAmount string `protobuf:"bytes,3,opt,name=max_amount,json=maxAmount,proto3" json:"max_amount,omitempty"`
}

func (x *StakingPoolUpdated_TickConfigDetail) Reset() {
	*x = StakingPoolUpdated_TickConfigDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_event_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakingPoolUpdated_TickConfigDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakingPoolUpdated_TickConfigDetail) ProtoMessage() {}

func (x *StakingPoolUpdated_TickConfigDetail) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_event_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakingPoolUpdated_TickConfigDetail.ProtoReflect.Descriptor instead.
func (*StakingPoolUpdated_TickConfigDetail) Descriptor() ([]byte, []int) {
	return file_indexer_event_proto_rawDescGZIP(), []int{5, 0}
}

func (x *StakingPoolUpdated_TickConfigDetail) GetTick() string {
	if x != nil {
		return x.Tick
	}
	return ""
}

func (x *StakingPoolUpdated_TickConfigDetail) GetRatio() string {
	if x != nil {
		return x.Ratio
	}
	return ""
}

func (x *StakingPoolUpdated_TickConfigDetail) GetMaxAmount() string {
	if x != nil {
		return x.MaxAmount
	}
	return ""
}

var File_indexer_event_proto protoreflect.FileDescriptor

var file_indexer_event_proto_rawDesc = []byte{
	0x0a, 0x13, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x72, 0x22, 0xad, 0x02, 0x0a, 0x11, 0x49, 0x45, 0x52, 0x43, 0x32, 0x30, 0x54, 0x69, 0x63,
	0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x2e, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x77, 0x6f, 0x72, 0x6b, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x77, 0x6f, 0x72,
	0x6b, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x22, 0xfc, 0x01, 0x0a, 0x0c, 0x49, 0x45, 0x52, 0x43, 0x32, 0x30, 0x4d, 0x69, 0x6e,
	0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12,
	0x2e, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x69, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x6d, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x61, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x67, 0x61, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x22, 0xd9, 0x04, 0x0a, 0x12, 0x49, 0x45, 0x52, 0x43, 0x50, 0x6f, 0x57, 0x54, 0x69, 0x63,
	0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x2e, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x79, 0x12, 0x5f, 0x0a, 0x12, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63,
	0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x49, 0x45,
	0x52, 0x43, 0x50, 0x6f, 0x57, 0x54, 0x69, 0x63, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x11, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x38, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72,
	0x2e, 0x49, 0x45, 0x52, 0x43, 0x50, 0x6f, 0x57, 0x54, 0x69, 0x63, 0x6b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x4d, 0x0a, 0x10, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x21, 0x0a, 0x0c,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xa3, 0x01, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x77, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x77, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x69, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x63, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x69,
	0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x5f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x73, 0x50, 0x6f, 0x6f, 0x6c, 0x22, 0xe9, 0x04,
	0x0a, 0x0d, 0x49, 0x45, 0x52, 0x43, 0x50, 0x6f, 0x57, 0x4d, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x2e, 0x0a, 0x07, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x69, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f,
	0x70, 0x6f, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x50, 0x6f, 0x77,
	0x12, 0x26, 0x0a, 0x0f, 0x70, 0x6f, 0x77, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x6f, 0x77, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x6f, 0x77, 0x5f,
	0x6d, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x6f, 0x77, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x70, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x6f, 0x77,
	0x4d, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06,
	0x69, 0x73, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73,
	0x50, 0x6f, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x6f,
	0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70,
	0x6f, 0x73, 0x5f, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x6f, 0x73, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x6f, 0x73, 0x5f, 0x6d, 0x69, 0x6e, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x70, 0x6f, 0x73, 0x4d, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x67, 0x61, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x67, 0x61,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x61, 0x69, 0x72, 0x64, 0x72, 0x6f, 0x70, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x41, 0x69, 0x72, 0x64, 0x72, 0x6f, 0x70, 0x12, 0x25, 0x0a,
	0x0e, 0x61, 0x69, 0x72, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x69, 0x72, 0x64, 0x72, 0x6f, 0x70, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x72,
	0x6e, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9e, 0x02, 0x0a, 0x0f, 0x54, 0x69,
	0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x2e, 0x0a, 0x07, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x52, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x63,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74,
	0x6f, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x74, 0x68,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x74,
	0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x73, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x72, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x22, 0xbb, 0x03, 0x0a, 0x12, 0x53,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6f, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x2e, 0x0a,
	0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x73,
	0x12, 0x4a, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6f, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x6f, 0x70, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x5b, 0x0a, 0x10, 0x54,
	0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x69, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x97, 0x05, 0x0a, 0x05, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x25,
	0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x69, 0x65, 0x72, 0x63, 0x5f, 0x74, 0x78,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x6f, 0x73, 0x49, 0x6e, 0x49, 0x65,
	0x72, 0x63, 0x54, 0x78, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x72,
	0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x72,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x49, 0x45, 0x52, 0x43, 0x32, 0x30, 0x54,
	0x69, 0x63, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x69,
	0x63, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x6d, 0x69, 0x6e,
	0x74, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x49, 0x45, 0x52, 0x43, 0x32, 0x30, 0x4d, 0x69,
	0x6e, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x12, 0x4b,
	0x0a, 0x10, 0x70, 0x6f, 0x77, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x49, 0x45, 0x52, 0x43, 0x50, 0x6f, 0x57, 0x54, 0x69,
	0x63, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x6f, 0x77,
	0x54, 0x69, 0x63, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x70,
	0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x49, 0x45,
	0x52, 0x43, 0x50, 0x6f, 0x57, 0x4d, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x09, 0x70,
	0x6f, 0x77, 0x4d, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x12, 0x49, 0x0a, 0x10, 0x74, 0x69, 0x63, 0x6b,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72,
	0x2e, 0x54, 0x69, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x48, 0x00, 0x52, 0x0f, 0x74, 0x69, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x0c, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x6f, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6f,
	0x6f, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2a, 0xd4, 0x01, 0x0a, 0x07, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x17,
	0x0a, 0x13, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x69, 0x6e, 0x74, 0x10, 0x02, 0x12, 0x0c, 0x0a,
	0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x46,
	0x72, 0x65, 0x65, 0x7a, 0x65, 0x53, 0x65, 0x6c, 0x6c, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x55,
	0x6e, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x53, 0x65, 0x6c, 0x6c, 0x10, 0x05, 0x12, 0x11, 0x0a,
	0x0d, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x10, 0x06,
	0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x10,
	0x07, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x6e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x55, 0x6e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x10, 0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x10, 0x0b, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x41, 0x69, 0x72, 0x64, 0x72, 0x6f, 0x70, 0x10, 0x0c, 0x42, 0x44, 0x0a, 0x0b, 0x61, 0x70, 0x69,
	0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x50, 0x01, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x49, 0x45, 0x72, 0x63, 0x4f, 0x72, 0x67, 0x2f, 0x49,
	0x45, 0x52, 0x43, 0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_indexer_event_proto_rawDescOnce sync.Once
	file_indexer_event_proto_rawDescData = file_indexer_event_proto_rawDesc
)

func file_indexer_event_proto_rawDescGZIP() []byte {
	file_indexer_event_proto_rawDescOnce.Do(func() {
		file_indexer_event_proto_rawDescData = protoimpl.X.CompressGZIP(file_indexer_event_proto_rawDescData)
	})
	return file_indexer_event_proto_rawDescData
}

var file_indexer_event_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_indexer_event_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_indexer_event_proto_goTypes = []interface{}{
	(Operate)(0),                                // 0: api.indexer.Operate
	(*IERC20TickCreated)(nil),                   // 1: api.indexer.IERC20TickCreated
	(*IERC20Minted)(nil),                        // 2: api.indexer.IERC20Minted
	(*IERCPoWTickCreated)(nil),                  // 3: api.indexer.IERCPoWTickCreated
	(*IERCPoWMinted)(nil),                       // 4: api.indexer.IERCPoWMinted
	(*TickTransferred)(nil),                     // 5: api.indexer.TickTransferred
	(*StakingPoolUpdated)(nil),                  // 6: api.indexer.StakingPoolUpdated
	(*Event)(nil),                               // 7: api.indexer.Event
	(*IERCPoWTickCreated_TokenomicsDetail)(nil), // 8: api.indexer.IERCPoWTickCreated.TokenomicsDetail
	(*IERCPoWTickCreated_Rule)(nil),             // 9: api.indexer.IERCPoWTickCreated.Rule
	(*StakingPoolUpdated_TickConfigDetail)(nil), // 10: api.indexer.StakingPoolUpdated.TickConfigDetail
}
var file_indexer_event_proto_depIdxs = []int32{
	0,  // 0: api.indexer.IERC20TickCreated.operate:type_name -> api.indexer.Operate
	0,  // 1: api.indexer.IERC20Minted.operate:type_name -> api.indexer.Operate
	0,  // 2: api.indexer.IERCPoWTickCreated.operate:type_name -> api.indexer.Operate
	8,  // 3: api.indexer.IERCPoWTickCreated.tokenomics_details:type_name -> api.indexer.IERCPoWTickCreated.TokenomicsDetail
	9,  // 4: api.indexer.IERCPoWTickCreated.rule:type_name -> api.indexer.IERCPoWTickCreated.Rule
	0,  // 5: api.indexer.IERCPoWMinted.operate:type_name -> api.indexer.Operate
	0,  // 6: api.indexer.TickTransferred.operate:type_name -> api.indexer.Operate
	0,  // 7: api.indexer.StakingPoolUpdated.operate:type_name -> api.indexer.Operate
	10, // 8: api.indexer.StakingPoolUpdated.details:type_name -> api.indexer.StakingPoolUpdated.TickConfigDetail
	1,  // 9: api.indexer.Event.tick_created:type_name -> api.indexer.IERC20TickCreated
	2,  // 10: api.indexer.Event.minted:type_name -> api.indexer.IERC20Minted
	3,  // 11: api.indexer.Event.pow_tick_created:type_name -> api.indexer.IERCPoWTickCreated
	4,  // 12: api.indexer.Event.pow_minted:type_name -> api.indexer.IERCPoWMinted
	5,  // 13: api.indexer.Event.tick_transferred:type_name -> api.indexer.TickTransferred
	6,  // 14: api.indexer.Event.pool_updated:type_name -> api.indexer.StakingPoolUpdated
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_indexer_event_proto_init() }
func file_indexer_event_proto_init() {
	if File_indexer_event_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_indexer_event_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IERC20TickCreated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_event_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IERC20Minted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_event_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IERCPoWTickCreated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_event_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IERCPoWMinted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_event_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TickTransferred); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_event_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakingPoolUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_event_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_event_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IERCPoWTickCreated_TokenomicsDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_event_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IERCPoWTickCreated_Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_event_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakingPoolUpdated_TickConfigDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_indexer_event_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*Event_TickCreated)(nil),
		(*Event_Minted)(nil),
		(*Event_PowTickCreated)(nil),
		(*Event_PowMinted)(nil),
		(*Event_TickTransferred)(nil),
		(*Event_PoolUpdated)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_indexer_event_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_indexer_event_proto_goTypes,
		DependencyIndexes: file_indexer_event_proto_depIdxs,
		EnumInfos:         file_indexer_event_proto_enumTypes,
		MessageInfos:      file_indexer_event_proto_msgTypes,
	}.Build()
	File_indexer_event_proto = out.File
	file_indexer_event_proto_rawDesc = nil
	file_indexer_event_proto_goTypes = nil
	file_indexer_event_proto_depIdxs = nil
}
