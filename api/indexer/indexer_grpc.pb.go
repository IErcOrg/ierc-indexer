// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: indexer/indexer.proto

package indexer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Indexer_SubscribeEvent_FullMethodName        = "/api.indexer.Indexer/SubscribeEvent"
	Indexer_SubscribeSystemStatus_FullMethodName = "/api.indexer.Indexer/SubscribeSystemStatus"
	Indexer_QueryEvents_FullMethodName           = "/api.indexer.Indexer/QueryEvents"
	Indexer_QuerySystemStatus_FullMethodName     = "/api.indexer.Indexer/QuerySystemStatus"
	Indexer_CheckTransfer_FullMethodName         = "/api.indexer.Indexer/CheckTransfer"
)

// IndexerClient is the client API for Indexer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IndexerClient interface {
	SubscribeEvent(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Indexer_SubscribeEventClient, error)
	SubscribeSystemStatus(ctx context.Context, in *SubscribeSystemStatusRequest, opts ...grpc.CallOption) (Indexer_SubscribeSystemStatusClient, error)
	QueryEvents(ctx context.Context, in *QueryEventsRequest, opts ...grpc.CallOption) (*QueryEventsReply, error)
	QuerySystemStatus(ctx context.Context, in *QuerySystemStatusRequest, opts ...grpc.CallOption) (*QuerySystemStatusReply, error)
	CheckTransfer(ctx context.Context, in *CheckTransferRequest, opts ...grpc.CallOption) (*CheckTransferReply, error)
}

type indexerClient struct {
	cc grpc.ClientConnInterface
}

func NewIndexerClient(cc grpc.ClientConnInterface) IndexerClient {
	return &indexerClient{cc}
}

func (c *indexerClient) SubscribeEvent(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Indexer_SubscribeEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &Indexer_ServiceDesc.Streams[0], Indexer_SubscribeEvent_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &indexerSubscribeEventClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Indexer_SubscribeEventClient interface {
	Recv() (*SubscribeReply, error)
	grpc.ClientStream
}

type indexerSubscribeEventClient struct {
	grpc.ClientStream
}

func (x *indexerSubscribeEventClient) Recv() (*SubscribeReply, error) {
	m := new(SubscribeReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *indexerClient) SubscribeSystemStatus(ctx context.Context, in *SubscribeSystemStatusRequest, opts ...grpc.CallOption) (Indexer_SubscribeSystemStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &Indexer_ServiceDesc.Streams[1], Indexer_SubscribeSystemStatus_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &indexerSubscribeSystemStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Indexer_SubscribeSystemStatusClient interface {
	Recv() (*SubscribeSystemStatusReply, error)
	grpc.ClientStream
}

type indexerSubscribeSystemStatusClient struct {
	grpc.ClientStream
}

func (x *indexerSubscribeSystemStatusClient) Recv() (*SubscribeSystemStatusReply, error) {
	m := new(SubscribeSystemStatusReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *indexerClient) QueryEvents(ctx context.Context, in *QueryEventsRequest, opts ...grpc.CallOption) (*QueryEventsReply, error) {
	out := new(QueryEventsReply)
	err := c.cc.Invoke(ctx, Indexer_QueryEvents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) QuerySystemStatus(ctx context.Context, in *QuerySystemStatusRequest, opts ...grpc.CallOption) (*QuerySystemStatusReply, error) {
	out := new(QuerySystemStatusReply)
	err := c.cc.Invoke(ctx, Indexer_QuerySystemStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) CheckTransfer(ctx context.Context, in *CheckTransferRequest, opts ...grpc.CallOption) (*CheckTransferReply, error) {
	out := new(CheckTransferReply)
	err := c.cc.Invoke(ctx, Indexer_CheckTransfer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IndexerServer is the server API for Indexer service.
// All implementations must embed UnimplementedIndexerServer
// for forward compatibility
type IndexerServer interface {
	SubscribeEvent(*SubscribeRequest, Indexer_SubscribeEventServer) error
	SubscribeSystemStatus(*SubscribeSystemStatusRequest, Indexer_SubscribeSystemStatusServer) error
	QueryEvents(context.Context, *QueryEventsRequest) (*QueryEventsReply, error)
	QuerySystemStatus(context.Context, *QuerySystemStatusRequest) (*QuerySystemStatusReply, error)
	CheckTransfer(context.Context, *CheckTransferRequest) (*CheckTransferReply, error)
	mustEmbedUnimplementedIndexerServer()
}

// UnimplementedIndexerServer must be embedded to have forward compatible implementations.
type UnimplementedIndexerServer struct {
}

func (UnimplementedIndexerServer) SubscribeEvent(*SubscribeRequest, Indexer_SubscribeEventServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeEvent not implemented")
}
func (UnimplementedIndexerServer) SubscribeSystemStatus(*SubscribeSystemStatusRequest, Indexer_SubscribeSystemStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeSystemStatus not implemented")
}
func (UnimplementedIndexerServer) QueryEvents(context.Context, *QueryEventsRequest) (*QueryEventsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryEvents not implemented")
}
func (UnimplementedIndexerServer) QuerySystemStatus(context.Context, *QuerySystemStatusRequest) (*QuerySystemStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySystemStatus not implemented")
}
func (UnimplementedIndexerServer) CheckTransfer(context.Context, *CheckTransferRequest) (*CheckTransferReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTransfer not implemented")
}
func (UnimplementedIndexerServer) mustEmbedUnimplementedIndexerServer() {}

// UnsafeIndexerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IndexerServer will
// result in compilation errors.
type UnsafeIndexerServer interface {
	mustEmbedUnimplementedIndexerServer()
}

func RegisterIndexerServer(s grpc.ServiceRegistrar, srv IndexerServer) {
	s.RegisterService(&Indexer_ServiceDesc, srv)
}

func _Indexer_SubscribeEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IndexerServer).SubscribeEvent(m, &indexerSubscribeEventServer{stream})
}

type Indexer_SubscribeEventServer interface {
	Send(*SubscribeReply) error
	grpc.ServerStream
}

type indexerSubscribeEventServer struct {
	grpc.ServerStream
}

func (x *indexerSubscribeEventServer) Send(m *SubscribeReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Indexer_SubscribeSystemStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeSystemStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IndexerServer).SubscribeSystemStatus(m, &indexerSubscribeSystemStatusServer{stream})
}

type Indexer_SubscribeSystemStatusServer interface {
	Send(*SubscribeSystemStatusReply) error
	grpc.ServerStream
}

type indexerSubscribeSystemStatusServer struct {
	grpc.ServerStream
}

func (x *indexerSubscribeSystemStatusServer) Send(m *SubscribeSystemStatusReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Indexer_QueryEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).QueryEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexer_QueryEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).QueryEvents(ctx, req.(*QueryEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_QuerySystemStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySystemStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).QuerySystemStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexer_QuerySystemStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).QuerySystemStatus(ctx, req.(*QuerySystemStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_CheckTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).CheckTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexer_CheckTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).CheckTransfer(ctx, req.(*CheckTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Indexer_ServiceDesc is the grpc.ServiceDesc for Indexer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Indexer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.indexer.Indexer",
	HandlerType: (*IndexerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryEvents",
			Handler:    _Indexer_QueryEvents_Handler,
		},
		{
			MethodName: "QuerySystemStatus",
			Handler:    _Indexer_QuerySystemStatus_Handler,
		},
		{
			MethodName: "CheckTransfer",
			Handler:    _Indexer_CheckTransfer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeEvent",
			Handler:       _Indexer_SubscribeEvent_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeSystemStatus",
			Handler:       _Indexer_SubscribeSystemStatus_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "indexer/indexer.proto",
}
