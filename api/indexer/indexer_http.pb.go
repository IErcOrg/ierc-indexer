// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.1
// - protoc             v3.21.12
// source: indexer/indexer.proto

package indexer

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationIndexerCheckTransfer = "/api.indexer.Indexer/CheckTransfer"
const OperationIndexerQueryEvents = "/api.indexer.Indexer/QueryEvents"
const OperationIndexerQuerySystemStatus = "/api.indexer.Indexer/QuerySystemStatus"

type IndexerHTTPServer interface {
	CheckTransfer(context.Context, *CheckTransferRequest) (*CheckTransferReply, error)
	// QueryEvents
	QueryEvents(context.Context, *QueryEventsRequest) (*QueryEventsReply, error)
	// QuerySystemStatus
	QuerySystemStatus(context.Context, *QuerySystemStatusRequest) (*QuerySystemStatusReply, error)
}

func RegisterIndexerHTTPServer(s *http.Server, srv IndexerHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v2/index/events", _Indexer_QueryEvents0_HTTP_Handler(srv))
	r.GET("/api/v2/index/status", _Indexer_QuerySystemStatus0_HTTP_Handler(srv))
	r.GET("/api/v2/index/check_transfer", _Indexer_CheckTransfer0_HTTP_Handler(srv))
}

func _Indexer_QueryEvents0_HTTP_Handler(srv IndexerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QueryEventsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationIndexerQueryEvents)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.QueryEvents(ctx, req.(*QueryEventsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QueryEventsReply)
		return ctx.Result(200, reply)
	}
}

func _Indexer_QuerySystemStatus0_HTTP_Handler(srv IndexerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QuerySystemStatusRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationIndexerQuerySystemStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.QuerySystemStatus(ctx, req.(*QuerySystemStatusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QuerySystemStatusReply)
		return ctx.Result(200, reply)
	}
}

func _Indexer_CheckTransfer0_HTTP_Handler(srv IndexerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CheckTransferRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationIndexerCheckTransfer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CheckTransfer(ctx, req.(*CheckTransferRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckTransferReply)
		return ctx.Result(200, reply)
	}
}

type IndexerHTTPClient interface {
	CheckTransfer(ctx context.Context, req *CheckTransferRequest, opts ...http.CallOption) (rsp *CheckTransferReply, err error)
	QueryEvents(ctx context.Context, req *QueryEventsRequest, opts ...http.CallOption) (rsp *QueryEventsReply, err error)
	QuerySystemStatus(ctx context.Context, req *QuerySystemStatusRequest, opts ...http.CallOption) (rsp *QuerySystemStatusReply, err error)
}

type IndexerHTTPClientImpl struct {
	cc *http.Client
}

func NewIndexerHTTPClient(client *http.Client) IndexerHTTPClient {
	return &IndexerHTTPClientImpl{client}
}

func (c *IndexerHTTPClientImpl) CheckTransfer(ctx context.Context, in *CheckTransferRequest, opts ...http.CallOption) (*CheckTransferReply, error) {
	var out CheckTransferReply
	pattern := "/api/v2/index/check_transfer"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationIndexerCheckTransfer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *IndexerHTTPClientImpl) QueryEvents(ctx context.Context, in *QueryEventsRequest, opts ...http.CallOption) (*QueryEventsReply, error) {
	var out QueryEventsReply
	pattern := "/api/v2/index/events"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationIndexerQueryEvents))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *IndexerHTTPClientImpl) QuerySystemStatus(ctx context.Context, in *QuerySystemStatusRequest, opts ...http.CallOption) (*QuerySystemStatusReply, error) {
	var out QuerySystemStatusReply
	pattern := "/api/v2/index/status"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationIndexerQuerySystemStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
